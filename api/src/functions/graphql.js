import importAll from '@redwoodjs/api/importAll.macro'
import { ApolloServer } from 'apollo-server-lambda'
import { makeAugmentedSchema } from 'neo4j-graphql-js'
import neo4j from 'neo4j-driver'

// Fetch all GraphQL SDL types defined in graphql/*.sdl.js
// and combine into a single typeDefs string
const sdls = importAll('api', 'graphql')
const typeDefs = Object.values(sdls).reduce((acc, v) => acc + v.schema, '')

// Create a connection to a Neo4j instance
// reading credentials from environment variables (can be set in .env)
const driver = neo4j.driver(
  process.env.NEO4J_URL,
  neo4j.auth.basic(process.env.NEO4J_USER, process.env.NEO4J_PASSWORD),
  { encrypted: true }
)

// Create an executable GraphQL schema with autogenerated
// resolvers from our type definitions
const schema = makeAugmentedSchema({ typeDefs })

// Create an ApolloServer instance, passing our GraphQL schema
// and injecting the Neo4j driver instance into the resolver context
const server = new ApolloServer({
  schema,
  context: { driver },
  playground: true,
  introspection: true,
})

exports.handler = server.createHandler()
